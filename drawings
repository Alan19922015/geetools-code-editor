/***
 * Drawings Widget
 * Author: Rodrigo E. Principe
 * email: fitoprincipe82@gmail.com
 * licence: MIT
 ***/

var tools = require('users/fitoprincipe/geetools:tools')
var helper = require('users/fitoprincipe/geetools:helpers_js')

var Polygon = function(options) {
  
  // Arguments
  var def = {
    map: Map,
    map_callback: null,
    map_callback_id: null,
    name: 'geetools_polygon'
  }
  this.opt = tools.get_options(def, options)
  
  this.point_list = []
  this.callback_ID = null
  
  this.start = function() {
    // unbound callback if parsed
    if (this.opt.map_callback && this.opt.map_callback_id) {
      opt.map.unlisten(opt.map_callback_id)
    }
    
    this.point_list = []
    var feat_list = []
    var name = helpers.uuid4()
    
    var fc = ee.FeatureCollection(feat_list)
    Map.addLayer(fc, {}, name)
    
    var callback = function(coords) {
      this.point_list.push(coords)
      var feat = ee.Feature(ee.Geometry.Point(coords))
      feat_list.push(feat)
      var newfc = ee.FeatureCollection(feat_list)
      var layer = tools.map.getLayer(name)
      tools.map.replaceLayer(layer, newfc, opt.map)
    }
    
    this.callback_ID = opt.map.onClick(callback)
  }
  
  this.end = function() {
    // unbound callback
    opt.map.unlisten(this.callback_ID)
    
    // bound callback again
    if (this.opt.map_callback && this.opt.map_callback_id) {
      opt.map.onClick(opt.map_callback)
    }
    
    var polygon = ee.Geometry.Polygon(this.point_list)
    Map.addLayer(polygon, null, opt.name)
  }
  
}

var Drawings = function(options) {
  
  var def = {
    width: 300,
    height: 100,
    position: 'top-center',
    layout: ui.Panel.Layout.flow('vertical'),
    drawings: ['polygon'],
    map: Map,
  }
  var opt = tools.get_options(def, options)
  
  var width = new helper.pixelSize(opt.width)
  var height = new helper.pixelSize(opt.height)
  
  if (width.number < 150) {
    print('Width of the widget must be greater than 120')
    return null
  }
  
  // Select drawing
  this.type_drop = ui.Select({
    items: opt.drawings,
    value: opt.drawings[0],
  })
  
  // Add a drawing
  this.start_button = ui.Button({
    label: 'start',
    style: {
      width: 20,
    }
  })
  
  this.end_button = ui.Button({
    label: 'end',
    style: {
      width: 20,
    }
  })
  
  var size_name = width.subtract(100).subtract(20)
  
  this.drawing_name = ui.Textbox({
    style: {
      width: size_name.value(),
    }
  })
  
  this.add_panel = ui.Panel({
    widgets: [this.drawing_name, this.start_button, this.end_button],
    layout: ui.Panel.Layout.flow('horizontal')
  })
  
  this.panel = ui.Panel({
    widgets: [
      this.type_drop,
      this.add_panel,
    ],
    style: {
      width: opt.width,
      height: opt.height,
      position: opt.position,
    },
    layout: opt.layout
  })
}

Drawings.prototype.start = function() {
  var app = this
  var toDraw = app.type_drop.getValue()
  if (toDraw === 'polygon') {
    this.drawing = new Polygon(app.map)
    this.drawing.start()
  }
}

Drawings.prototype.end = function() {
  var app = this
  app.drawing.stop()
}

Drawings.prototype.build = function() {
  return this.panel
}

Drawings.prototype.addTo = function(widget) {
  widget.add(this.build())
  this.parent = widget
  return widget
}

Drawings.prototype.insertTo = function(widget, position) {
  widget.insert(position, this.build())
  this.parent = widget
  return widget
}

var test = function() {
  var d = new Drawings()
  d.insertTo(ui.root, 0)
}

test()