/*
 * Author: Rodrigo E. Principe
 * License: Apache 2.0
 * email: fitoprincipe82@gmail.com

Some tools
*/

var help = {};

var constant_image = function(options) {
  var def = {value:0, bandnames:null, bands:null}
  
  if (options !== undefined) {var opt = options} else {opt = def}
  
  var value = opt['value']
  var bandnames = opt['bandnames']
  var bands = opt['bands']
  
  if (bands !== null) {
    print('got bands')
    var dict = ee.Dictionary(bands)
    bandnames = dict.keys()  // ee.List
    var bandlist = dict.map(function(key, val){
      var v = ee.Number(val);
      var k = ee.String(key)
      var f = ee.Image(v).select([0], [k])
      return f
      }).values()
  } else {
    print('got no bands')
    if (bandnames === null) {bandnames = ['constant']}
    var bandlist = bandnames.map(function(name){
      return ee.Image.constant(value).select([0], [name])
    })
  }
  var bandlist = ee.List(bandlist)
  var final = ee.Image(bandlist.iterate(function(img, ini){
      ini = ee.Image(ini)
      return ini.addBands(img)
    }, ee.Image(0)))
  return final.select(bandnames)
}

var addLayerCol = function(col, options) {
  
  var fbands = ee.Image(col.first()).bandNames();
  var def_viz = {bands: [fbands.get(0).getInfo(), 
                         fbands.get(1).getInfo(), 
                         fbands.get(2).getInfo()], min:0, max:1};
  
  var def = {viz: def_viz, active: false, label:'ID'};
  
  if (options !== undefined) {var opt = options} else {var opt = def}
  
  if (opt['viz'] !== undefined) {var viz = opt['viz']} else {var viz = def['viz']}
  if (opt['active'] !== undefined) {var active = opt['active']} else {var active = def['active']}
  if (opt['label'] !== undefined) {var label = opt['label']} else {var label = def['label']}
  
  // var label = label;
  var n = col.size().getInfo();
  var list = col.toList(n);
  // var active = active;
  for (var i = 0; i < n; i++) {
    var img = ee.Image(list.get(i));
    if (label == "ID") {
      var id = img.id().getInfo();
      var laylabel = label+" "+id;
    } else if (label == "system_date") {
      var date = img.date().format().getInfo()
      var laylabel = date;
    } else if (img.propertyNames().contains(label).getInfo() === true) {
      var p = img.get(label).getInfo();
      var laylabel = label+" "+p
    } else {
      print(label+" not found")
      var laylabel = "No. "+i.toString();
    }
    Map.addLayer(img, viz, laylabel, active)
  }
}

var ExportCol = function(col, folder, scale, type,
                         nimg, maxPixels, region) {
    type = type || "float";
    nimg = nimg || 500;
    scale = scale || 1000;
    maxPixels = maxPixels || 1e13;

    var colList = col.toList(nimg);
    var n = colList.size().getInfo();

    for (var i = 0; i < n; i++) {
      var img = ee.Image(colList.get(i));
      var id = img.id().getInfo();
      region = region || img.geometry().bounds().getInfo()["coordinates"];

      var imgtype = {"float":img.toFloat(),
                     "byte":img.toByte(),
                     "int":img.toInt(),
                     "double":img.toDouble()
                    }

      Export.image.toDrive({
        image:imgtype[type],
        description: id,
        folder: folder,
        fileNamePrefix: id,
        region: region,
        scale: scale,
        maxPixels: maxPixels})
    }
  }

help['complete'] = 'https://github.com/fitoprincipe/geetools-code-editor'

help['addLayerCol'] = 'This function adds all images\n'+ 
                      'from one Collection to the Map.\n'+
                      'You can label the images using any \n'+
                      'available property or choosing between \n'+
                      '"date" or "ID"\n\n'+
                      'Use: addLayerCol(collection, options)\n'+
                      'options: (dictionary)\n'+
                      '  viz: visualization parameters (dict)\n'+
                      '  active: if each image will be active (bool)\n'+
                      '  label: the label to put as image name, can be any property of the image, or\n'+
                      '         "ID": the name will be the ID\n'+
                      '         "system_date": the name will be the image date'

help['ExportCol'] = 'Exports all images from one Collection'

exports.addLayerCol = addLayerCol
exports.ExportCol = ExportCol
exports.help = help
exports.constant_image = constant_image