/*
 * Author: Rodrigo E. Principe
 * License: Apache 2.0
 * email: fitoprincipe82@gmail.com

Some tools
*/

var help = {};

var replace_band = function(image, replace_band, add_band) {
    var band = add_band.select([0]);
    var bands = image.bandNames();
    band = band.select([0], [replace_band]);
    var resto = bands.remove(replace_band);
    var img_resto = image.select(resto);
    var img_final = img_resto.addBands(band);
    return img_final
}

var sum_bands = function(name, bands, append_to_image) {
  
  bands = bands || ee.List([]);
  name = name || 'sum_bands';
  var append = append_to_image || ee.Number(0);
  
  print(bands, name, append)
  
  var wrap = function(image) {
        var bn = ee.Algorithms.If(bands, ee.List(bands), image.bandNames());
        var nim = ee.Image(0).select([0], [name]);

        // TODO: check if passed band names are in band names
        var sumBandas = function(n, ini) {
            return ee.Image(ini).add(image.select([n]))
        }

        var newimg = ee.Image(ee.List(bn).iterate(sumBandas, nim))
        
        var total = ee.Image(ee.Algorithms.If(append, 
                                              image.addBands(newimg),
                                              newimg))
        
        return total
  }
  return wrap
}

var dict2image = function(bands) {
  
  if (bands === undefined) {var opt={constant:0}} else {var opt=bands}
  
  var dict = ee.Dictionary(opt)
  var bandnames = dict.keys()  // ee.List
  var bandlist = dict.map(function(key, val){
      var v = ee.Number(val);
      var k = ee.String(key)
      var f = ee.Image(v).select([0], [k])
      return f
      }).values()
  bandlist = ee.List(bandlist)
  var final = ee.Image(bandlist.iterate(function(img, ini){
      ini = ee.Image(ini)
      return ini.addBands(img)
    }, ee.Image(0)))
  return final.select(bandnames)
}

var list2image = function(list, value) {
  if (value === undefined) {var val = 0} else {var val = value}
  var listt = ee.List(list)
  
  var imglist = listt.map(function(name){
    return ee.Image(val).select([0], [name])
  })
  var final = ee.Image(imglist.iterate(function(img, ini){
    ini = ee.Image(ini)
    return ini.addBands(img)
  }, ee.Image(0)))
  return final.select(listt)
}

var addLayerCol = function(col, options) {
  
  var fbands = ee.Image(col.first()).bandNames();
  var def_viz = {bands: [fbands.get(0).getInfo(), 
                         fbands.get(1).getInfo(), 
                         fbands.get(2).getInfo()], min:0, max:1};
  
  var def = {viz: def_viz, active: false, label:'ID'};
  
  if (options !== undefined) {var opt = options} else {var opt = def}
  
  if (opt['viz'] !== undefined) {var viz = opt['viz']} else {var viz = def['viz']}
  if (opt['active'] !== undefined) {var active = opt['active']} else {var active = def['active']}
  if (opt['label'] !== undefined) {var label = opt['label']} else {var label = def['label']}
  
  // var label = label;
  var n = col.size().getInfo();
  var list = col.toList(n);
  // var active = active;
  for (var i = 0; i < n; i++) {
    var img = ee.Image(list.get(i));
    if (label == "ID") {
      var id = img.id().getInfo();
      var laylabel = label+" "+id;
    } else if (label == "system_date") {
      var date = img.date().format().getInfo()
      var laylabel = date;
    } else if (img.propertyNames().contains(label).getInfo() === true) {
      var p = img.get(label).getInfo();
      var laylabel = label+" "+p
    } else {
      print(label+" not found")
      var laylabel = "No. "+i.toString();
    }
    Map.addLayer(img, viz, laylabel, active)
  }
}

var ExportCol = function(col, folder, scale, type,
                         nimg, maxPixels, region) {
    type = type || "float";
    nimg = nimg || 500;
    scale = scale || 1000;
    maxPixels = maxPixels || 1e13;

    var colList = col.toList(nimg);
    var n = colList.size().getInfo();

    for (var i = 0; i < n; i++) {
      var img = ee.Image(colList.get(i));
      var id = img.id().getInfo();
      region = region || img.geometry().bounds().getInfo()["coordinates"];

      var imgtype = {"float":img.toFloat(),
                     "byte":img.toByte(),
                     "int":img.toInt(),
                     "double":img.toDouble()
                    }

      Export.image.toDrive({
        image:imgtype[type],
        description: id,
        folder: folder,
        fileNamePrefix: id,
        region: region,
        scale: scale,
        maxPixels: maxPixels})
    }
  }

help['gitHub'] = 'https://github.com/fitoprincipe/geetools-code-editor'

help['addLayerCol'] = 'addLayerCol()\n\n'+
                      'This function adds all images\n'+ 
                      'from one Collection to the Map.\n'+
                      'You can label the images using any \n'+
                      'available property or choosing between \n'+
                      '"date" or "ID"\n\n'+
                      'Use: addLayerCol(collection, options)\n'+
                      'options: (dictionary)\n'+
                      '  viz: visualization parameters (dict)\n'+
                      '  active: if each image will be active (bool)\n'+
                      '  label: the label to put as image name, can be any property of the image, or\n'+
                      '         "ID": the name will be the ID\n'+
                      '         "system_date": the name will be the image date'

help['ExportCol'] = 'ExportCol()\n\n'+
                    'Exports all images from one Collection'

help['dict2image'] = "dict2image(bands)\n\n"+
                     "Create an Image from dict's key/values pairs\n\n"+
                     "For example:\n"+
                     "var i = dict2image({one:1, two:2});\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 1\n"+
                     "  two: all pixels have value = 2"
                     
help['list2image'] = "list2image(list, value)\n\n"+
                     "Create an Image from a list and an optional value\n\n"+
                     "For example:\n"+
                     "var i = list2image(['one', 'two']);\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 0\n"+
                     "  two: all pixels have value = 0\n\n"+
                     "var i2 = list2image(['one', 'two'], 2);\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 2\n"+
                     "  two: all pixels have value = 2"

help['sum_bands'] = 'sum_bands(name, bands, append_to_image)\n\n'+
                    'Add all *bands* values and puts the result on *name*\n'+
                    'name: name for the band that will hold the result\n'+
                    'bands: list of bands to sum\n'+
                    'append_to_image: if true (default) the resulting image\n'+
                    'will have all bands plus the resulting band'

help['replace_band'] = 'replace_band(image, replace_band, add_band)\n\n'+
                       'Replace one band of the image with a provided band\n'+
                       'image: Image containing the band to replace\n'+
                       "replace_band: name of the band to replace. If the image hasn't got\n"+
                       'that band, it will be added to the image.\n'+
                       'add_band: Image (one band) containing the band to add. If an Image\n'+
                       'with more than one band is provided, it uses the first band.'

exports.addLayerCol = addLayerCol
exports.ExportCol = ExportCol
exports.help = help
exports.dict2image = dict2image
exports.list2image = list2image
exports.sum_bands = sum_bands
exports.replace_band = replace_band