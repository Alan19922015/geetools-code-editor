/*********************************
 * Some tools
 * Author: Rodrigo E. Principe
 * License: Apache 2.0
 * email: fitoprincipe82@gmail.com
 * page: https://github.com/fitoprincipe/geetools-code-editor/wiki
 **********************************/

var helpersJS = require('users/fitoprincipe/geetools:helpers_js')

var msg = "geetools ver. 0.1.0\n\n"+
"If you code depends on this module, and has \n"+
"stopped working, please contact \n"+
"fitoprincipe82@gmail.com or visit \n"+
"https://github.com/fitoprincipe/geetools-code-editor/wiki"

//print(msg)

var version = "0.1.1";
exports.version = version

var help = {};

// INTERNAL
exports.get_options = helpersJS.get_options

/** COLLECTIONS **/
var collection = {};

collection.enumerate = function(col) {
  var collist = col.toList(col.size())
  
  // first element
  var ini = ee.Number(0)
  var first_image = ee.Image(collist.get(0))
  var first = ee.List([ini, first_image])
  
  var start = ee.List([first])
  var rest = collist.slice(1)
  
  var list = ee.List(rest.iterate(function(im, s){
    im = ee.Image(im)
    s = ee.List(s)
    var last = ee.List(s.get(-1))
    var last_index = ee.Number(last.get(0))
    var index = last_index.add(1)
    return s.add(ee.List([index, im]))
  }, start))
  
  return list
}

/** STRINGS */
var string = {};

// format
string.format = function(string, replacement) {
  var str = ee.String(string)
  var repl = ee.Dictionary(replacement)
  var keys = repl.keys()
  var values = repl.values()
  var z = keys.zip(values)
  
  var newstr = z.iterate(function(kv, ini){
    var keyval = ee.List(kv)
    ini = ee.String(ini)
    
    var key = ee.String(keyval.get(0))
    var value = ee.String(keyval.get(1))
    
    var pattern = ee.String('{').cat(key).cat(ee.String('}'))
    
    return ini.replace(pattern, value)
    
  }, str)
  return ee.String(newstr)
}

/** GEOMETRIES */
var geometry = {};

// mask out pixels inside a geometry (return a function for mapping)
geometry.maskInside = function(geometry) {
  var mask = ee.Image.constant(1).clip(geometry).mask().not()
  
  var wrap = function(img) {
    return img.updateMask(mask)
  }
  return wrap
}

// paint geometries
geometry.paint = function(geometry, options) {
  
  var def = {
    fillColor: null,
    borderColor: 'black',
    border: 2,
    idFld: null
  }
  
  var opt = helpersJS.get_options(def, options)
  
  var type = geometry.name()
  
  // build FeatureCollection depending on geometry type
  if (type === 'Geometry') {
    geometry = ee.FeatureCollection([ee.Feature(geometry)])
  } else if (type === 'Feature') {
    geometry = ee.FeatureCollection([geometry])
  }
  
  // Fill  
  if (opt.fillColor !== null) {
    var fill = ee.Image().paint(geometry, 1).visualize({palette:[opt.fillColor]})
  }
  
  // Border
  var out = ee.Image().paint(geometry, 1, opt.border).visualize({palette:[opt.borderColor]})
  
  // Fill & Border
  if ((opt.fillColor !== null) & (opt.borderColor !== null)){ var rgbVector = fill.blend(out)}
  
  // Only Fill
  else if (opt.fillColor !== null){ var rgbVector = fill } 
  
  // Only Border
  else { var rgbVector = out }
  
  // Get id image
  if (opt.idFld !== null) {
    var idImg = geometry.reduceToImage([opt.idFld], ee.Reducer.first()).rename(opt.idFld)
    return rgbVector.addBands(idImg)
  } else {
    return rgbVector
  }
}

/** IMAGES */
var image = {};

// get value from point
image.getValue = function(image, point, scale) {
  var sc = ee.Number(scale).toInt() || 10;
  var result = image.reduceRegion(ee.Reducer.first(), point, sc);
  return result
}

// replace one band with another band
image.replaceBand = function(image, replace_band, add_band) {
    var band = add_band.select([0]);
    var bands = image.bandNames();
    var resto = bands.remove(replace_band);
    var img_resto = image.select(resto);
    var img_final = img_resto.addBands(band);
    return img_final
}

// SUFFIX TO BAND
image.addSuffix = function(suffix, bands) {
  if (bands == undefined) {
    var bands = null
  } else {
    var bands = ee.List(bands)
  }
  var suf = ee.String(suffix)
  var wrap = function(img) {
    var allbands = img.bandNames()
    var bands_ = ee.List(ee.Algorithms.If(bands, bands, allbands))
    var newbands = bands_.iterate(function(band, first){
      var all = ee.List(first)
      return all.replace(band, ee.String(band).cat(suf))
    }, allbands)
    newbands = ee.List(newbands)
    return img.select(allbands, newbands)
  }
  return wrap
}

// PREFIX TO BAND
image.addPrefix = function(prefix, bands) {
  if (bands == undefined) {
    var bands = null
  } else {
    var bands = ee.List(bands)
  }
  var suf = ee.String(prefix)
  var wrap = function(img) {
    var allbands = img.bandNames()
    var bands_ = ee.List(ee.Algorithms.If(bands, bands, allbands))
    var newbands = bands_.iterate(function(band, first){
      var all = ee.List(first)
      return all.replace(band, suf.cat(ee.String(band)))
    }, allbands)
    newbands = ee.List(newbands)
    return img.select(allbands, newbands)
  }
  return wrap
}

// MAKE AN IMAGE FROM A DICT (Equals to Dictionary.toImage())
image.fromDict = function(bands) {
  // this is the same as doing ee.Dictionary().toImage()
  
  if (bands === undefined) {var opt={constant:0}} else {var opt=bands}
  
  var dict = ee.Dictionary(opt)
  var bandnames = dict.keys()  // ee.List
  var bandlist = dict.map(function(key, val){
      var v = ee.Number(val);
      var k = ee.String(key)
      var f = ee.Image(v).select([0], [k])
      return f
      }).values()
  bandlist = ee.List(bandlist)
  var final = ee.Image(bandlist.iterate(function(img, ini){
      ini = ee.Image(ini)
      return ini.addBands(img)
    }, ee.Image(0)))
  return final.select(bandnames)
}

// MAKE AN IMAGE FROM A LIST
image.fromList = function(list, value) {
  if (value === undefined) {var val = 0} else {var val = value}
  var listt = ee.List(list)
  
  var imglist = listt.map(function(name){
    return ee.Image(val).select([0], [name])
  })
  var final = ee.Image(imglist.iterate(function(img, ini){
    ini = ee.Image(ini)
    return ini.addBands(img)
  }, ee.Image(0)))
  return final.select(listt)
}

image.removeBands = function(image, bands) {
  var bnames = image.bandNames()
  var bands = ee.List(bands)
  
  var inter = list.intersection(bnames, bands)
  // var diff = list.subtract(bnames, inter)
  var diff = bnames.removeAll(inter)
  
  return image.select(diff)
}

//** IMAGE COLLECTIONS **//
var imageCollection = {};

imageCollection.enumerateProperty = function(col, name) {
  name = name || 'enumeration'
  //var collist = col.toList(col.size())
  var enumerated = collection.enumerate(col)
  
  var featlist = enumerated.map(function(l){
    l = ee.List(l)
    var index = ee.Number(l.get(0))
    var element = l.get(1)
    return ee.Image(element).set(name, index)
  })
  return ee.ImageCollection.fromImages(featlist)
}

/** MAP */
var map = {};

// ADD COLLECTION TO MAP
map.addImageCollection = function(col, options) {
  
  var fbands = ee.Image(col.first()).bandNames();
  
  var bands = ee.List(ee.Algorithms.If(
    fbands.size().gt(2), 
    ee.List([fbands.get(0), fbands.get(1), fbands.get(2)]),
    ee.List([fbands.get(0)])
    ))
    
  var def = {
    vis: {bands: bands.getInfo(), min:0, max:1},
    active: false,
    label: 'system_id'
  }
  
  var opt = helpersJS.get_options(def, options)
  
  // var label = label;
  var n = col.size().getInfo();
  var list = col.toList(n);
  // var active = active;
  for (var i = 0; i < n; i++) {
    var img = ee.Image(list.get(i));
    if (opt.label == "system_id") {
      var id = img.id().getInfo();
      var laylabel = opt.label+" "+id;
    } else if (opt.label == "system_date") {
      var date = img.date().format().getInfo()
      var laylabel = date;
    } else if (img.propertyNames().contains(opt.label).getInfo() === true) {
      var p = img.get(opt.label).getInfo();
      var laylabel = opt.label+" "+p
    } else {
      print(opt.label+" not found")
      var laylabel = "No. "+i.toString();
    }
    Map.addLayer(img, opt.vis, laylabel, opt.active)
  }
}

// Remove Layer
// https://gis.stackexchange.com/questions/291199/google-earth-engine-remove-layer-from-the-layer-manager
map.removeLayerByName = function(name, map) {
  var m = map || Map
  var layers = m.layers()
  // list of layers names
  var names = []
  layers.forEach(function(lay) {
    var lay_name = lay.getName()
    names.push(lay_name)
  })
  // get index
  var index = names.indexOf(name)
  if (index > -1) {
    // if name in names
    var layer = layers.get(index)
    m.remove(layer)
  } else {
    print('Layer '+name+' not found')
  }
}

map.removeAllLayersByName = function(name, map) {
  var m = map || Map
  var layers = m.layers().getJsArray()
  for (var i in layers) {
    var lay = layers[i]
    var lay_name = lay.getName()
    if (lay_name === name) {
      m.remove(lay)
    }
  }
}

map.removeLayer = function(layer, map) {
  var m = map || Map
  var layers = m.layers().getJsArray()
  for (var i in layers) {
    var lay = layers[i]
    if (lay === layer) {
      m.remove(lay)
      return i
    }
  }
}

map.replaceLayer = function(layer, newlayer, map) {
  var m = map || Map
  var layers = m.layers()
  var layersjs = layers.getJsArray()
  for (var i in layersjs) {
    var lay = layersjs[i]
    if (lay === layer) {
      var i = layersjs.indexOf(layer)
      layers.set(i, newlayer)
    }
  }
}

map.removeObject = function(eeobject, map) {
  // remove every added object in the map
  var m = map || Map
  var layers = m.layers()
  var layersJS = layers.getJsArray()
  var removedIndexes = []
  for (var i in layersJS) {
    var layer = layers[i]
    var object = layer.getEeObject()
    if (object === eeobject) {
      print('equal')
      layers.remove(layer)
      removedIndexes.push(i)
    }
  }
  /*
  layers.forEach(function(layer, i) {
    var object = layer.getEeObject()
    if (object === eeobject) {
      print('equal')
      //layers.remove(layer)
      removedIndexes.push(i)
    }
  })
  */
  return removedIndexes
}

map.getLayer = function(name, map) {
  var m = map || Map
  var layers = m.layers()
  var l = layers.length()
  for (var i=0; i<l; i++) {
    var lay = layers.get(i)
    var n = lay.getName()
    if (n === name) {
      break
    }
  }
  return lay
}

/** NUMBER */
var number = {};

// RANDOM NUMBER
number.random = function(start, end, type) {
  var s = start || 0
  var e = end || 1
  var t = type || 'float'
  
  s = ee.Number(s)
  e = ee.Number(e)
  
  var diff = e.subtract(s)
  
  var value = ee.Number(Math.random())
  
  var result = value.multiply(diff).add(s)
  
  if (t == 'float') {
    return result}
  else if (t == 'int') {
    return result.toInt()
    }
}

// TRIM DECIMALS
number.trimDecimals = function(places) {
  
  var factor = ee.Number(10).pow(ee.Number(places).toInt())
  
  var wrap = function(number) {
    var n = ee.Number(number)
    
    var floor = n.floor()
    var decimals = n.subtract(floor)
    var take = decimals.multiply(factor).toInt()
    var newdecimals = take.toFloat().divide(factor)
    return floor.add(newdecimals).toFloat()
  }
  return wrap
}

/** FEATURECOLLECTION **/
var featureCollection = {};

// GET UNIQUE PROPERTY VALUES
featureCollection.propertyValues = function(col, property) {
  var collist = col.toList(col.size())
  var newlist = collist.map(function(feat){
    return ee.Feature(feat).get(property)
  }).removeAll([null]).removeAll([""])
  return newlist
}

featureCollection.toDictionary = function(col, options) {
  var def = {
    properties: null,
    idField: null
  }
  var opt = helpersJS.get_options(def, options)
  
  var idField = opt.idField || 'system:index'
  
  var newdict = col.iterate(function(feat, ini){
    ini = ee.Dictionary(ini)
    var f = ee.Feature(feat)
    var id = f.get(idField)
    if (opt.idField) {
      var props = f.toDictionary(opt.properties).remove([opt.idField])
    } else {
      var props = f.toDictionary(opt.properties)
    }
    return ini.set(id, props)
  }, ee.Dictionary({}))
  return newdict
}

featureCollection.enumerateProperty = function(col, name) {
  name = name || 'enumeration'
  //var collist = col.toList(col.size())
  var enumerated = collection.enumerate(col)
  
  var featlist = enumerated.map(function(l){
    l = ee.List(l)
    var index = ee.Number(l.get(0))
    var element = l.get(1)
    return ee.Feature(element).set(name, index)
  })
  return ee.FeatureCollection(featlist)
}

/** FEATURE */
var feature = {};

// GET FEATURE PROPERTY
feature.gets = function(feature, properties) {
  var list = ee.List(properties) || feature.propertyNames()
  var newlist = list.map(function(el){
    return feature.get(el)
  })
  return newlist
}

// AGGREGATE PROPERTIES
feature.reduce = function(options) {
  var opt = options || {'reducer': 'mean',
                        'properties': ee.Number(0),
                        'name': 'reduction'}
                        
  var reduc = opt['reducer'] || 'mean'
  var prop = opt['properties'] || ee.Number(0)
  var n = opt['name'] || 'reduction'
  
  var wrap = function(feat) {
    var propnames = feat.propertyNames().remove('system:index')
    var prop2use = ee.List(ee.Algorithms.If(prop, prop, propnames))
    var properties = list.intersection(prop2use, propnames)
    var values = feature.gets(feat, properties)
    var casted = values.map(function(el){return ee.Number(el)})
    return feat.set(n, ee.Number(casted.reduce(reduc)))
  }
  
  return wrap
}

/** LIST */
var list = {};

// Sequence
list.sequence = function(ini, end, step) {
    var step = step || 1
    var end = ee.Number(end)
    if (step === 0){
        step = 1
    }
    var amplitude = end.subtract(ini)
    var mod = amplitude.mod(step)
    var seq = ee.List.sequence(ini, end, step)
    var condition = mod.neq(0)
    var final = ee.Algorithms.If(condition, seq.add(end), seq)
    
    return ee.List(final)
}

// Remove duplicate values
list.removeDuplicates = function(list) {
  var newlist = ee.List([]);
  list = ee.List(list)
  var wrap = function(element, init) {
    init = ee.List(init);
    var contained = init.contains(element);
    
    return ee.Algorithms.If(contained, init, init.add(element));
  };
  return ee.List(list.iterate(wrap, newlist));
}

// Intersection
list.intersection = function(list1, list2) {
  var newlist = ee.List([])
    var wrap = function(element, first) {
        first = ee.List(first)

        return ee.Algorithms.If(list2.contains(element), first.add(element), first)
    }
    return ee.List(list1.iterate(wrap, newlist))
}

// Substract two lists
list.difference = function(list1, list2) {
  return list1.removeAll(list2).add(list2.removeAll(list1)).flatten()
}

// Filter a list with a regex value
list.filterRegex = function(list, regex, flags) {
  list = ee.List(list)
  var fl = flags || null
  var i = ee.List([])
  var f = list.iterate(function(el, first){
    var f = ee.List(first)
    var e = ee.String(el);
    var matched = ee.List(e.match(regex, fl))
    return ee.Algorithms.If(matched.size().gt(0), f.add(el), f)
  }, i)
  return ee.List(f)
}

// Remove an element by its index number
list.removeIndex = function(list, index) {
  list = ee.List(list)
  index = ee.Number(index)
  var size = list.size()
  
  var allowed = function() {
    var zerof = function(list) {
      return list.slice(1, list.size())
    }
    
    var rest = function(list, index) {
      list = ee.List(list)
      index = ee.Number(index)
      var last = index.eq(list.size())
      
      var lastf = function(list) {
        return list.slice(0, list.size().subtract(1))
      }
      
      var restf = function(list, index) {
        list = ee.List(list)
        index = ee.Number(index)
        var first = list.slice(0, index)
        return first.cat(list.slice(index.add(1), list.size()))
      }
      return ee.List(ee.Algorithms.If(last, lastf(list), restf(list, index)))
    }
    
    return ee.List(ee.Algorithms.If(index, rest(list, index), zerof(list)))
  }
  
  var condition = index.gte(size).or(index.lt(0))
  
  return ee.List(ee.Algorithms.If(condition, -1, allowed()))
}

/** DICTIONARIES */
var dictionary = {};

// Extract values from a list of keys
dictionary.extractList = function(dict, list) {
  var empty = ee.List([])
  list = ee.List(list)
  dict = ee.Dictionary(dict)
  var values = ee.List(list.iterate(function(el, first) {
    var f = ee.List(first)
    var cond = dict.contains(el);
    return ee.Algorithms.If(cond, f.add(dict.get(el)), f)
  }, empty))
  return values
}


/** MISC */

// UUID4
// from https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript#answer-21963136
var uuid4 = helpersJS.uuid4
exports.uuid4 = uuid4

// COMPUTE BITS
var computeQAbits = function(start, end, newName) {
  var pattern = ee.Number(0)
  
  start = ee.Number(start).toInt()
  end = ee.Number(end).toInt()
  newName = ee.String(newName)
  
  var seq = ee.List.sequence(start, end)
  
  var patt = seq.iterate(
    function(element, ini) {
      ini = ee.Number(ini)
      var bit = ee.Number(2).pow(ee.Number(element));
      return ini.add(bit)
    }, pattern)
    
  patt = ee.Number(patt).toInt()
  
  var wrap = function(image) {
    var good_pix = image.select([0], [newName]).bitwiseAnd(patt).rightShift(start);
    return good_pix.toInt()
  }
  return wrap
}
exports.computeQAbits = computeQAbits


help['removeLayer'] = 'removeLayer(name):\n'+
                      'Remove a Layer from the Map by its name'

help['gitHub'] = 'https://github.com/fitoprincipe/geetools-code-editor'

help['addLayerCol'] = 'addLayerCol()\n\n'+
                      'This function adds all images\n'+ 
                      'from one Collection to the Map.\n'+
                      'You can label the images using any \n'+
                      'available property or choosing between \n'+
                      '"date" or "ID"\n\n'+
                      'Use: addLayerCol(collection, options)\n'+
                      'options: (dictionary)\n'+
                      '  viz: visualization parameters (dict)\n'+
                      '  active: if each image will be active (bool)\n'+
                      '  label: the label to put as image name, can be any property of the image, or\n'+
                      '         "ID": the name will be the ID\n'+
                      '         "system_date": the name will be the image date'

help['col2drive'] = 'col2drive(col, folder, options)\n\n'+
                    'Exports all images from one Collection\n'+
                    'col: ee.ImageCollection to export (all images)\n'+
                    'folder: name of the folder to put the images into (str)\n'+
                    'options: dict of options:\n'+
                    '  type: can be "float", "byte", "int" or "double"\n'+
                    "  scale: output images pixel's scale\n"+
                    '  maxPixels: same as ee.Export.image.toDrive\n'+
                    '  region: region to "clip" the images with. If not specified, will\n'+
                    '          use every image region'

help['dict2image'] = "dict2image(bands)\n\n"+
                     "Create an Image from dict's key/values pairs\n\n"+
                     "Is the same as doing ee.Dictionary().toImage()\n"+
                     "For example:\n"+
                     "var i = dict2image({one:1, two:2});\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 1\n"+
                     "  two: all pixels have value = 2"
                     
help['list2image'] = "list2image(list, value)\n\n"+
                     "Create an Image from a list and an optional value\n\n"+
                     "For example:\n"+
                     "var i = list2image(['one', 'two']);\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 0\n"+
                     "  two: all pixels have value = 0\n\n"+
                     "var i2 = list2image(['one', 'two'], 2);\n"+
                     "will return an image with 2 constant bands:\n"+
                     "  one: all pixels have value = 2\n"+
                     "  two: all pixels have value = 2"

help['sum_bands'] = 'sum_bands(name, bands, append_to_image)\n\n'+
                    'Add all *bands* values and puts the result on *name*\n'+
                    'name: name for the band that will hold the result\n'+
                    'bands: list of bands to sum\n'+
                    'append_to_image: if true (default) the resulting image\n'+
                    'will have all bands plus the resulting band'

help['replace_band'] = 'replace_band(image, replace_band, add_band)\n\n'+
                       'Replace one band of the image with a provided band\n'+
                       'image: Image containing the band to replace\n'+
                       "replace_band: name of the band to replace. If the image hasn't got\n"+
                       'that band, it will be added to the image.\n'+
                       'add_band: Image (one band) containing the band to add. If an Image\n'+
                       'with more than one band is provided, it uses the first band.'

help['get_value'] = 'get_value(image, point, scale)\n\n'+
                    'Extract values for each band of the image in the specified point'

help['mask_geometry'] = 'mask_geometry(geometry)\n\n'+
                        'Mask out pixels inside a geometry\n'+
                        'geometry: can be a Geometry, Feature or FeatureCollection'
                        
help['computeQAbits']  = 'computeQAbits(start, end, newName)\n\n'+
                         'get the mask for the "on" bits since start to end and name\n'+
                         'the image with newName.'

help['trim_decimals'] = 'trim_decimals(places)\n\n'+
                        'Decrease or Increase the number of decimals in a ee.Number\n'+
                        'places: number of places of the new number\n'+
                        'returns a function to map over a list'

help['aggregate_properties'] = 'aggregate_properties(option)\n\n'+
                               'Apply a reducer over properties of a feature or features\n'+
                               'in a collection\n'+
                               'options:\n'+
                               '  reducer: the reducer to apply over the properties. Defaults: mean\n'+
                               '  properties: a list of the property names to reduce over. Defaults: all properties\n'+
                               '  name: name for the resulted property. Defaults: reduction\n'

help['add_suffix'] = 'add_suffix(suffix, bands)(image)\n\n'+
                     'Add the specified suffix to the specified bands of image\n'+
                     'If no bands are specified, all bands are used.'
                     
help['add_prefix'] = 'add_suffix(prefix, bands)(image)\n\n'+
                     'Add the specified prefix to the specified bands of image\n'+
                     'If no bands are specified, all bands are used.'
                     
exports.help = help
exports.options = ee.Dictionary(help).keys()
exports.geometry = geometry
exports.string = string
exports.image = image
exports.map = map
exports.number = number
exports.feature = feature
exports.list = list
exports.dictionary = dictionary
exports.featureCollection = featureCollection
exports.imageCollection = imageCollection
exports.collection = collection