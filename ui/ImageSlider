var sat = require('users/fitoprincipe/geetools:satellite')
var tools = require('users/fitoprincipe/geetools:tools')
var wid = require('users/fitoprincipe/geetools:widgets')
var helpers = require('users/fitoprincipe/geetools:helpers_js')

var ImageSlider = function(collection, options) {
  var def = {
    start: null,
    end: null,
    title: 'ImageSlider',
    width: 200,
    mosaic: true,
    site: null,
    map: Map
  }
  
  this.options = helpers.get_options(def, options)
  var ordered = collection.sort('system:time_start', true)
  this.collection = ordered
  
  if (this.options.site) {
    this.hash = helpers.hash(site.serialize())
  } else {
    this.hash = null
  }
  
  if (!this.options.start) {
    var first = ordered.first()
    this.options.start = first.date().format().getInfo()
  }
  if (!this.options.end) {
    var last = ee.Image(ordered.toList(ordered.size()).get(-1))
    this.options.end = last.date().format().getInfo()
  }
  
  this.slider = ui.DateSlider(this.options.start, this.options.end)
  var forth = ui.Button({
    label: 'forward'
  })
  var back = ui.Button({
    label: 'backward'
  })
  var buttons = ui.Panel([back, forth])
  buttons.setLayout(ui.Panel.Layout.flow('horizontal'))
  
  this.panel = ui.Panel({
    widgets: [ui.Label(this.options.title), this.slider, buttons]
  })
  
  this.setWidth(this.options.width)
  this.images = {}
}

ImageSlider.prototype.build = function() {
  return this.panel
}

ImageSlider.prototype.addTo = function(widget) {
  widget.add(this.build())
  this.parent = widget
  return widget
}

ImageSlider.prototype.insertTo = function(widget, position) {
  widget.insert(position, this.build())
  this.parent = widget
  return widget
}

ImageSlider.prototype.setWidth = function(width) {
  var ps = new helpers.PixelSize(width)
  this.panel.style().set('width', ps.value())
  var sliderwidth = ps.subtract(30).value()
  this.slider.style().set('width', sliderwidth)
}

ImageSlider.prototype.getDate = function() {
  return this.slider.getValue()[0]
}

ImageSlider.prototype.getFiltered = function(collection, date, site, strategy) {
  var filtered = collection.filterBounds(site)
  date = ee.Date(date)
  if (strategy === 'exact') {
    var start = date
  } else if (strategy === 'back') {
    filtered = filtered.filterDate('1970-01-01', date.advance(1, 'day'))
    var sorted = filtered.sort('system:time_start', false)
    var first = ee.Image(sorted.first())
    var start = first.date() 
    this.slider.setValue(start.millis().getInfo())
  } else if (strategy === 'forth') {
    filtered = filtered.filterDate(date, date.advance(1, 'month'))
    var sorted = filtered.sort('system:time_start', true)
    var first = ee.Image(sorted.first())
    var start = first.date()
    this.slider.setValue(start.millis().getInfo())
  } else if (strategy === 'closest') {
    var image = tools.imageCollection.getClosestTo(filtered, date)
    var start = image.date()
    this.slider.setValue(start.millis().getInfo())
  }
  var end = start.advance(1, 'day')
  filtered = filtered.filterDate(start, end)
  
  return filtered
}

ImageSlider.prototype.getImage = function(options) {
  // date param must be in milliseconds
  
  var def = {
    date: this.getDate(),
    site: this.options.site,
    mosaic: this.options.mosaic,
    strategy: 'closest'
  }
  var opt = helpers.get_options(def, options)
  
  var site = opt.site || tools.map.getBounds(this.map)
  
  var self = this
  var proxy = ee.Image(0).selfMask()
  
  var getImage = function(filtered) {
    var size = filtered.size()
    if (opt.mosaic) {
      var geom = tools.imageCollection.mergeGeometries(filtered)
      var image = filtered.mosaic().set('system:time_start', opt.date).clip(geom)
    } else {
      var image = filtered.first()
    }
    image = ee.Image(ee.Algorithms.If(size, image, proxy))
    return image
  }
  
  if (this.options.site) { // storte in images dict
    
  }
  
  var filtered = this.getFiltered(this.collection, opt.date, site, opt.strategy)
  return getImage(filtered)
  
}

ImageSlider.prototype.forward = function(site, mosaic) {
  site = site || this.options.site || this.options.map.getBounds()
  mosaic = mosaic || this.options.mosaic
  /*
  var start = ee.Date(this.getValue())
  var end = ee.Date(this.slider.getEnd()).advance(1, 'day')
  var filtered = this.collection.filterDate(start, end)
  var image = filtered.first()
  // set slider value
  image.date().evaluate(function(d){this.slider.setValue(d)})
  this.image
  */
}

ImageSlider.prototype.backward = function() {
  var start = ee.Date(this.slider.getStart())
  var end = ee.Date(this.getValue()).advance(1, 'day')
  var filtered = this.collection.filterDate(start, end)
  var image = ee.Image(filtered.toList(filtered.size()).get(-1))
  // set slider value
  image.date().evaluate(function(d){this.slider.setValue(d)})
  this.image
}

var test = function() {
  var col = ee.ImageCollection('COPERNICUS/S2')
  var slider = new ImageSlider(col, {start: '2018-01-01', end:'2018-05-01'})
  slider.setWidth(500)
  slider.addTo(Map)
  var but = ui.Button('get')
  but.onClick(function() {
    var i = slider.getImage()
    if (i) {
      Map.addLayer(i, {bands:['B4', 'B3', 'B2'], min:0, max:5000}, 'S2')
    } else { print('no images') }
  })
  Map.add(but)
}

test()
