/***
 * DrawingPanel Widget
 * Author: Rodrigo E. Principe
 * email: fitoprincipe82@gmail.com
 * licence: MIT
 ***/

var tools = require('users/fitoprincipe/geetools:tools')
var helper = require('users/fitoprincipe/geetools:helpers_js')
var Polygon = require('users/fitoprincipe/geetools:ui/polygon').Polygon

var options = {
  'polygon': Polygon,
}

var DrawingPanel = function(options) {
  
  var def = {
    width: 300,
    height: 100,
    border: '1px solid black',
    position: 'top-center',
    layout: ui.Panel.Layout.flow('vertical'),
    drawings: ['polygon'],
    map: Map,
    map_callback: null,
    map_callback_id: null,
    title: null,
  }
  this.opt = tools.get_options(def, options)
  
  var width = new helper.PixelSize(this.opt.width)
  var height = new helper.PixelSize(this.opt.height)
  
  if (width.number < 150) {
    print('Width of the widget must be greater than 150')
    return null
  }
  
  // Select drawing
  this.type_drop = ui.Select({
    items: this.opt.drawings,
    value: this.opt.drawings[0],
  })
  
  // Add a drawing
  this.start_button = ui.Button({
    label: 'start',
    style: {
      width: 20,
    }
  })
  
  this.end_button = ui.Button({
    label: 'stop',
    style: {
      width: 20,
    }
  })
  
  var size_name = width.subtract(100).subtract(20)
  
  this.drawing_name = ui.Textbox({
    style: {
      width: size_name.value(),
    }
  })
  
  this.add_panel = ui.Panel({
    widgets: [this.drawing_name, this.start_button, this.end_button],
    layout: ui.Panel.Layout.flow('horizontal')
  })
  
  var widgets = [
      this.type_drop,
      this.add_panel,
    ]
    
  if (this.opt.title) {
    var title_text = ui.Label(this.opt.title)
    widgets = helper.array.insert(widgets, 0, title_text)
  }
  
  this.panel = ui.Panel({
    widgets: widgets,
    style: {
      width: this.opt.width,
      height: this.opt.height,
      position: this.opt.position,
      border: this.opt.border
    },
    layout: this.opt.layout
  })
  
  this.draw = null
  this.drawing = null
  this.onStopCallback = null
}

DrawingPanel.prototype.start = function() {
  var app = this
  var wrap = function() {
    var toDraw = app.type_drop.getValue()
    
    var Draw = options[toDraw]
    
    if (app.draw) {
      app.opt.map_callback_id = app.draw.opt.map_callback_id
    }
    
    app.draw = new Draw({
      map: app.map,
      name: app.drawing_name.getValue(),
      map_callback: app.opt.map_callback,
      map_callback_id: app.opt.map_callback_id,
    })
    app.draw.start()
  }
  return wrap
}

DrawingPanel.prototype.stop = function() {
  var app = this
  var wrap = function() {
    app.draw.stop()
    var drawing = app.draw.getDrawing()
    if (app.onStopCallback) {
      app.onStopCallback(drawing)
    }
  }
  return wrap
}

DrawingPanel.prototype.onStop = function(callback) {
  this.onStopCallback = callback || null
}

DrawingPanel.prototype.build = function() {
  // bind callbacks
  this.start_button.onClick(this.start()) 
  this.end_button.onClick(this.stop())
  
  return this.panel
}

DrawingPanel.prototype.addTo = function(widget) {
  widget.add(this.build())
  this.parent = widget
  return widget
}

DrawingPanel.prototype.insertTo = function(widget, position) {
  widget.insert(position, this.build())
  this.parent = widget
  return widget
}

exports.DrawingPanel = DrawingPanel

var test = function() {
  var call = function(coords) {print(coords)}
  var testID = Map.onClick(call)
  
  var d = new DrawingPanel({
    map: Map,
    map_callback: call,
    map_callback_id: testID,
    position: 'bottom-left',
    //title: 'TEST'
  })
  //d.insertTo(ui.root, 0)
  d.addTo(Map)
  d.onStop(function(drawing) {print(drawing)})
  
  var addGeoButton = ui.Button('add drawn geometry')
  var addGeom = function() {
    
  }
}

test()