/* 
 * Author: Rodrigo E. Principe
 * License: Apache 2.0
 * email: fitoprincipe82@gmail.com

Some batch useful tools
*/

var tools = require('users/fitoprincipe/geetools:tools')
var helpers = require('users/fitoprincipe/geetools:helpers_js')

// TASK CLASS
var Task = function(taskId, config) {
  this.id = taskId
  this.config = config
}

Task.prototype.start = function() {
    ee.data.startProcessing(this.id, this.config)
}

var IMAGE_TYPES = function(img, type) {
 var types = {  "float":img.toFloat(), 
                "byte":img.toByte(), 
                "int":img.toInt(),
                "double":img.toDouble(),
                "long": img.toLong(),
                "short": img.toShort(),
                "int8": img.toInt8(),
                "int16": img.toInt16(),
                "int32": img.toInt32(),
                "int64": img.toInt64(),
                "uint8": img.toUint8(),
                "uint16": img.toUint16(),
                "uint32": img.toUint32()}
  
  return types[type]
}

var Download = {'ImageCollection': {}, 'Table': {}}

Download.ImageCollection.toAsset = function(collection, assetFolder, options) {
  var root = ee.data.getAssetRoots()[0]['id']
  var folder = assetFolder
  if (folder !== null && folder !== undefined) {
    var assetFolder = root+'/'+folder+'/'
  } else {
    var assetFolder = root+'/'
  }
  
  var defaults = {
      name: null,
      scale: 1000,
      maxPixels: 1e13,
      region: null,
    }
    
  var opt = tools.get_options(defaults, options)
  var n = collection.size().getInfo();
    
  var colList = collection.toList(n);
  
  for (var i = 0; i < n; i++) {
    var img = ee.Image(colList.get(i));
    var id = img.id().getInfo() || 'image_'+i.toString();
    var region = opt.region || img.geometry().bounds().getInfo()["coordinates"];
    var assetId = assetFolder+id
    
    Export.image.toAsset({
      image: img,
      description: id,
      assetId: assetId,
      region: region,
      scale: opt.scale,
      maxPixels: opt.maxPixels})
  }
}

Download.ImageCollection.toDrive = function(collection, folder, options) {
    
    var defaults = {
      scale: 1000,
      maxPixels: 1e13,
      type: 'float',
      region: null,
      name: null,
      crs: null
    }
    
    var opt = tools.get_options(defaults, options)
    
    var n = collection.size().getInfo();
    
    var colList = collection.toList(n);
    
    var colID = collection.getInfo()['id'] || ""
    colID = colID.replace('/','_')
    
    for (var i = 0; i < n; i++) {
      var img = ee.Image(colList.get(i));
      if (opt.name) {
        if (opt.name.indexOf('{id}') !== -1) {
          var iid = img.id().getInfo()
        }
        if (opt.name.indexOf('{date}') !== -1) {
          var idate = img.date().format('yyyy-MM-dd').getInfo()
        }
        var id = helpers.string.format(opt.name, {id:iid, date:idate})
        
        id = helper._str(id)
      } else {
        var id = img.id().getInfo() || colID+'_image_'+i.toString()
      }
      
      var region = opt.region || img.geometry().bounds().getInfo()["coordinates"];
      
      var imtype = IMAGE_TYPES(img, opt.type)
      
      var params = {
        image: imtype,
        description: id,
        folder: folder,
        fileNamePrefix: id,
        region: region,
        scale: opt.scale,
        maxPixels: opt.maxPixels}
      
      if (opt.crs) {
        params.crs = opt.crs
      }
      
      Export.image.toDrive(params)
    }
  }
  
Download.Table.toAsset = function(collection, options) {
  var def = {
    description: 'myExportTableTask',
    assetId: null
  }
  var opt = tools.get_options(def, options)
  
  var full_config = {
      'type': 'EXPORT_FEATURES',
      'json': collection.serialize(),
      'description': opt.description,
      'state': 'UNSUBMITTED',
  }
  full_config.assetId = opt.assetId
  var task = new Task(ee.data.newTaskId()[0], full_config)
  return task
}
  
exports.Download = Download