/***
 * Functions to apply cloud mask to different collections
 * 
 * Author: Rodrigo E. Principe
 * email: fitoprincipe82@gmail.com
 * License: MIT
 */

var help = {};

var computeQAbits = function(image, start, end, newName) {
    var pattern = 0;

    for (var i=start; i<=end; i++) {
        pattern += Math.pow(2, i);
    }
    
    return image.select([0], [newName]).bitwiseAnd(pattern).rightShift(start);
};

var sentinel2 = function(image) {
  
  var cloud_mask = image.select("QA60");
  var opaque = computeQAbits(cloud_mask, 10, 10, "opaque");
  var cirrus = computeQAbits(cloud_mask, 11, 11, "cirrus");
  var mask = opaque.or(cirrus);
  
  return image.updateMask(mask.not());
}

var landsatSR = function(options) {
  var bits = {'cloud': 1, 'shadow': 2, 'adjacent': 3, 'snow': 4};
  var opt = ee.List(options) || ee.List(['cloud', 'shadow', 'adjacent', 'snow']);

  var wrap = function(image) {
      var bands = image.bandNames();
      var contains_sr = bands.contains('sr_cloud_qa');
  
      var sr = function() {
          var mask = image.select('sr_cloud_qa');
          var cloud_mask = computeQAbits(mask, 1, 1, 'cloud');
          var shadow_mask = computeQAbits(mask, 2, 2, 'shadow');
          var adjacent_mask = computeQAbits(mask, 3, 3, 'adjacent');
          var snow_mask = computeQAbits(mask, 4, 4, 'snow');
  
          good_pix = cloud_mask.eq(0)
                     .and(shadow_mask.eq(0))
                     .and(snow_mask.eq(0))
                     .and(adjacent_mask.eq(0))
          return good_pix
      }
  
      var pix = function() {
          mask = image.select('pixel_qa')
          cloud_mask = computeQAbits(mask, 5, 5, 'cloud')
          shadow_mask = computeQAbits(mask, 3, 3, 'shadow')
          snow_mask = computeQAbits(mask, 4, 4, 'snow')
  
          good_pix = cloud_mask.eq(0)
                     .and(shadow_mask.eq(0))
                     .and(snow_mask.eq(0))
          return good_pix
      }
  
      var good_pix = ee.Algorithms.If(contains_sr, sr(), pix());
  
      return image.updateMask(good_pix);
  }
  return wrap;
}

help['sentinel2'] = 'function to mask out clouds of Sentinel 2 images. Use on map function directly';
help['landsatSR'] = 'function to mask out clouds of Landsat SR images. There is one argument to specify what to mask'+
                    'if ommited all options will be masked out (cloud, shodow, adjacent and snow)'

exports.help = help
exports.sentinel2 = sentinel2
exports.landsatSR = landsatSR