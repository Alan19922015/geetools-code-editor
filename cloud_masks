/***
 * Functions to apply cloud mask to different collections
 * 
 * Author: Rodrigo E. Principe
 * email: fitoprincipe82@gmail.com
 * License: MIT
 */

var test_import = function() {
  print('geetools imported')
}

var help = {};

var computeQAbits = function(image, start, end, newName) {
    var pattern = 0;

    for (var i=start; i<=end; i++) {
        pattern += Math.pow(2, i);
    }
    
    return image.select([0], [newName]).bitwiseAnd(pattern).rightShift(start);
};

var sentinel2 = function(image) {
  
  var cloud_mask = image.select("QA60");
  var opaque = computeQAbits(cloud_mask, 10, 10, "opaque");
  var cirrus = computeQAbits(cloud_mask, 11, 11, "cirrus");
  var mask = opaque.or(cirrus);
  
  return image.updateMask(mask.not());
}

var landsatSR = function(options) {
  var bits = ee.Dictionary({'cloud': 1, 'shadow': 2, 'adjacent': 3, 'snow': 4});
  var opt = options || ['cloud', 'shadow', 'adjacent', 'snow'];
  
  options = ee.List(opt);
  
  var wrap = function(image) {
      var bands = image.bandNames();
      var contains_sr = bands.contains('sr_cloud_qa');
      
      var compute = function(rel) {
        var first = ee.Image.constant(0)
        var good_pix = ee.Image(
          options.iterate(function(o, ini){
            var cond = rel.contains(o);
            
            var i = ee.Image(ini);
            var m = ee.Image(rel.get(o));
            return ee.Image(ee.Algorithms.If(cond, i.or(m), i));
          }, first)
        );
      
        return good_pix.not();
      }
  
      var sr = function() {
          var mask = image.select('sr_cloud_qa');
          var cloud_mask = computeQAbits(mask, 1, 1, 'cloud');
          var shadow_mask = computeQAbits(mask, 2, 2, 'shadow');
          var adjacent_mask = computeQAbits(mask, 3, 3, 'adjacent');
          var snow_mask = computeQAbits(mask, 4, 4, 'snow');
          
          var rel = ee.Dictionary({
            'cloud': cloud_mask, 
            'shadow': shadow_mask,
            'snow': snow_mask,
            'adjacent': adjacent_mask
          })
          
          return compute(rel);
      }
  
      var pix = function() {
          var mask = image.select('pixel_qa')
          var cloud_mask = computeQAbits(mask, 5, 5, 'cloud')
          var shadow_mask = computeQAbits(mask, 3, 3, 'shadow')
          var snow_mask = computeQAbits(mask, 4, 4, 'snow')
          
          var rel = ee.Dictionary({
            'cloud': cloud_mask, 
            'shadow': shadow_mask,
            'snow': snow_mask
          })
          
          return compute(rel);
      }
  
      var good_pix = ee.Algorithms.If(contains_sr, sr(), pix());
  
      return image.updateMask(good_pix);
  }
  return wrap;
}

var landsatTOA = function(options) {
  var bits = ee.Dictionary({'cloud': 4, 'shadow': 8, 'snow': 10});
  var mask_band = 'BQA'
  
  // Parameters
  var opt = options || ['cloud', 'shadow', 'snow'];
  options = ee.List(opt);
  
  var wrap = function(image) {
    var bands = image.bandNames();
    
    var compute = function(rel) {
        var first = ee.Image.constant(0)
        var good_pix = ee.Image(
          options.iterate(function(o, ini){
            var cond = rel.contains(o);
            
            var i = ee.Image(ini);
            var m = ee.Image(rel.get(o));
            return ee.Image(ee.Algorithms.If(cond, i.or(m), i));
          }, first)
        );
      
        return good_pix.not();
      }
    
    var mask = image.select(mask_band)
          
    var rel = ee.Dictionary({
                'cloud': computeQAbits(mask, bits.get('cloud'), bits.get('cloud'), 'cloud'), 
                'shadow': computeQAbits(mask, bits.get('shadow'), bits.get('shadow'), 'shadow'),
                'snow': computeQAbits(mask, bits.get('snow'), bits.get('snow'), 'snow')
              })
          
    var good_pix = compute(rel);
    return image.updateMask(good_pix);
  }
}
 
var modis = function(options) {
  var bits = ee.Dictionary({'cloud': 1, 'shadow': 2, 'snow': 3});
  var opt = options || ['cloud', 'shadow', 'snow'];
  
  options = ee.List(opt);
}

var make = {sentinel2: sentinel2,
            landsatSR: landsatSR,
            landsatTOA: landsatTOA}

help['sentinel2'] = 'function to mask out clouds of Sentinel 2 images. Use on map function directly';
help['landsatSR'] = 'function to mask out clouds of Landsat SR images. There is one argument to specify what to mask'+
                    'if ommited all options will be masked out (cloud, shodow, adjacent and snow)'

exports.test_import = test_import

/*exports.help = help
exports.sentinel2 = sentinel2
exports.landsatSR = landsatSR
exports.landsatTOA = landsatTOA
exports.make = make*/